name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  
  group: ${{ github.workflow }}-${{ github.ref }}
  
  cancel-in-progress: true

permissions:
  contents: read

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  linux_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Rust
        run: rustup show
      - uses: mozilla-actions/sccache-action@v0.0.3
      - run: make venv
      - run: make pre-commit
      - run: make install
      - run: make test

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86]
    steps:
      - uses: actions/checkout@v3
      - name: Install OpenSSL & OpenBLAS development packages
        run: |
          echo 
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libudev-dev libopenblas-dev
      - name: Set PKG_CONFIG_PATH and OpenSSL environment variables
        run: |
          # Get the path of openssl binary
          openssl_path=$(which openssl)

          # If openssl_path is not empty, set environment variables
          if [ -n "$openssl_path" ]; then
              # Append openssl directory to PKG_CONFIG_PATH
              export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$(dirname $(dirname $openssl_path))/lib/pkgconfig"

              # Set OpenSSL environment variables
              export OPENSSL_DIR="$(dirname $(dirname $openssl_path))"
              export OPENSSL_LIB_DIR="$(dirname $openssl_path)"
              export OPENSSL_INCLUDE_DIR="$(dirname $(dirname $openssl_path))/include"

              # Check if OpenSSL development headers are present
              if [ -d "$(dirname $(dirname $openssl_path))/include/openssl" ]; then
                  echo "OpenSSL development headers found."
              else
                  echo "Warning: OpenSSL development headers not found."
              fi

              # Check if libssl.pc and openssl.pc files are present
              if [ -f "$(dirname $(dirname $openssl_path))/lib/pkgconfig/libssl.pc" ] && \
                 [ -f "$(dirname $(dirname $openssl_path))/lib/pkgconfig/openssl.pc" ]; then
                  echo "libssl.pc and openssl.pc files found."
              else
                  echo "Warning: libssl.pc or openssl.pc files not found in pkgconfig directory."
              fi

              # Print environment variables for debugging
              echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
              echo "OPENSSL_DIR: $OPENSSL_DIR"
              echo "OPENSSL_LIB_DIR: $OPENSSL_LIB_DIR"
              echo "OPENSSL_INCLUDE_DIR: $OPENSSL_INCLUDE_DIR"
          else
              echo "Error: openssl command not found."
          fi
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Run pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install .
          pip install -r tests/requirements-test.txt
          pytest tests/test_ols.py

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, macos, sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing *

